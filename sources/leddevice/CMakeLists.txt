
# Define the current source locations
SET(CURRENT_HEADER_DIR ${CMAKE_SOURCE_DIR}/include/leddevice)
SET(CURRENT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/sources/leddevice)

IF ( Qt5SerialPort_FOUND OR Qt6SerialPort_FOUND )
	SET( HAVE_SERIAL_LED ON) 
	MESSAGE (STATUS "Found Qt SerialPort library")
	include_directories( dev_serial )
else()
	MESSAGE (WARNING "Not found Qt SerialPort Library. Serial devices are disabled.")
endif()

include_directories(
	dev_hid
	dev_net
	dev_other
	dev_spi
	dev_rpi_pwm
	dev_tinker
	dev_ftdi
)

FILE ( GLOB Leddevice_SOURCES
	"${CURRENT_HEADER_DIR}/*.h"
	"${CURRENT_SOURCE_DIR}/*.h"
	"${CURRENT_SOURCE_DIR}/*.cpp"		
	"${CURRENT_SOURCE_DIR}/dev_net/*.h"
	"${CURRENT_SOURCE_DIR}/dev_net/*.cpp"
	"${CURRENT_SOURCE_DIR}/dev_other/*.h"
	"${CURRENT_SOURCE_DIR}/dev_other/*.cpp"
)

IF ( HAVE_SERIAL_LED )	
	FILE ( GLOB Leddevice_SERIAL_SOURCES "${CURRENT_SOURCE_DIR}/dev_serial/*.h" "${CURRENT_SOURCE_DIR}/dev_serial/*.cpp")
endif()

if ( ENABLE_OSX OR WIN32 )
	list(REMOVE_ITEM Leddevice_SOURCES "${CURRENT_SOURCE_DIR}/dev_other/LedDevicePiBlaster.h")
	list(REMOVE_ITEM Leddevice_SOURCES "${CURRENT_SOURCE_DIR}/dev_other/LedDevicePiBlaster.cpp")
endif()

if ( ENABLE_SPIDEV )
	FILE ( GLOB Leddevice_SPI_SOURCES "${CURRENT_SOURCE_DIR}/dev_spi/*.h" "${CURRENT_SOURCE_DIR}/dev_spi/*.cpp")
endif()

if ( ENABLE_FTDIDEV )
	FILE ( GLOB Leddevice_FTDI_SOURCES "${CURRENT_SOURCE_DIR}/dev_ftdi/*.h" "${CURRENT_SOURCE_DIR}/dev_ftdi/*.cpp")
endif()

if ( ENABLE_WS281XPWM )
	include_directories(../../external/rpi_ws281x)
	FILE ( GLOB Leddevice_PWM_SOURCES "${CURRENT_SOURCE_DIR}/dev_rpi_pwm/*.h" "${CURRENT_SOURCE_DIR}/dev_rpi_pwm/*.cpp")
endif()

set(LedDevice_RESOURCES ${CURRENT_SOURCE_DIR}/LedDeviceSchemas.qrc )

SET( Leddevice_SOURCES
	${Leddevice_SOURCES}
	${LedDevice_RESOURCES}
	${Leddevice_USB_HID_SOURCES}
	${Leddevice_SERIAL_SOURCES}
	${Leddevice_TINKER_SOURCES}
	${Leddevice_SPI_SOURCES}
	${Leddevice_PWM_SOURCES}
	${Leddevice_FTDI_SOURCES}
)

# auto generate header file that include all available leddevice headers
# auto generate cpp file for register() calls
FILE ( WRITE "${CMAKE_BINARY_DIR}/LedDevice_headers.h" "#pragma once\n\n//this file is autogenerated, don't touch it\n\n" )
FILE ( WRITE "${CMAKE_BINARY_DIR}/LedDevice_register.cpp" "//this file is autogenerated, don't touch it\n\n" )
FOREACH( f ${Leddevice_SOURCES} )
	# MESSAGE (STATUS "Add led device: ${f}")
	if ( "${f}" MATCHES "dev_.*/Led.evice.+h$" )
		GET_FILENAME_COMPONENT(fname ${f} NAME)
		FILE ( APPEND "${CMAKE_BINARY_DIR}/LedDevice_headers.h" "#include \"${fname}\"\n" )
		STRING( SUBSTRING ${fname} 9 -1 dname)
		STRING( REPLACE ".h" "" dname "${dname}" )
		FILE ( APPEND "${CMAKE_BINARY_DIR}/LedDevice_register.cpp" "REGISTER(${dname});\n" )
	endif()
ENDFOREACH()

add_library(leddevice ${CMAKE_BINARY_DIR}/LedDevice_headers.h ${Leddevice_SOURCES} )

target_link_libraries(leddevice
	hyperhdr-base
	hyperhdr-utils
	${CMAKE_THREAD_LIBS_INIT}
	Qt${Qt_VERSION}::Network
	ssdp
)

IF ( HAVE_SERIAL_LED )
	target_link_libraries(leddevice Qt${Qt_VERSION}::SerialPort)
endif()

if(WIN32)
	target_link_libraries(leddevice ws2_32)
endif()

if(ENABLE_TINKERFORGE)
	target_link_libraries(leddevice tinkerforge)
endif()

if(ENABLE_WS281XPWM)
	target_link_libraries(leddevice ws281x)
endif()

target_link_libraries(leddevice mbedcrypto)
target_link_libraries(leddevice mbedx509)
target_link_libraries(leddevice mbedtls)

if (NOT EXISTS "${MBEDTLS_INCLUDE_DIR}/mbedtls/build_info.h")
	message(STATUS "${YellowColor}Found mbedtls but the manifest is missing: ${MBEDTLS_INCLUDE_DIR}/mbedtls/build_info.h (not 3.x compatible?). Let's assume it's version 2.x...${ColorReset}")
	target_compile_definitions(leddevice PRIVATE MBEDTLS_OLD_CONFIG_FILE=<mbedtls/version.h>)
endif()

if(USE_PRECOMPILED_HEADERS AND COMMAND target_precompile_headers)
    target_precompile_headers(leddevice REUSE_FROM precompiled_hyperhdr_headers)
endif()

if(ENABLE_FTDIDEV)
	target_include_directories(leddevice PRIVATE ${LIB_FTDI_INCLUDE_DIRS} ${LIB_USB_INCLUDE_DIRS})
	target_link_libraries(leddevice ${LIB_FTDI_LINK_LIBRARIES} ${LIB_USB_LINK_LIBRARIES})
endif()
