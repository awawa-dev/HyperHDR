
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__ScreenCastProxy_h__proxy__H__
#define __sdbuscpp__ScreenCastProxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace freedesktop {
namespace portal {

class ScreenCast_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.freedesktop.portal.ScreenCast";

protected:
    ScreenCast_proxy(sdbus::IProxy& proxy)
        : m_proxy(proxy)
    {
    }

    ScreenCast_proxy(const ScreenCast_proxy&) = delete;
    ScreenCast_proxy& operator=(const ScreenCast_proxy&) = delete;
    ScreenCast_proxy(ScreenCast_proxy&&) = delete;
    ScreenCast_proxy& operator=(ScreenCast_proxy&&) = delete;

    ~ScreenCast_proxy() = default;

    void registerProxy()
    {
    }

public:
    sdbus::ObjectPath CreateSession(const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::ObjectPath result;
        m_proxy.callMethod("CreateSession").onInterface(INTERFACE_NAME).withArguments(options).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath SelectSources(const sdbus::ObjectPath& session_handle, const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::ObjectPath result;
        m_proxy.callMethod("SelectSources").onInterface(INTERFACE_NAME).withArguments(session_handle, options).storeResultsTo(result);
        return result;
    }

    sdbus::ObjectPath Start(const sdbus::ObjectPath& session_handle, const std::string& parent_window, const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::ObjectPath result;
        m_proxy.callMethod("Start").onInterface(INTERFACE_NAME).withArguments(session_handle, parent_window, options).storeResultsTo(result);
        return result;
    }

    sdbus::UnixFd OpenPipeWireRemote(const sdbus::ObjectPath& session_handle, const std::map<std::string, sdbus::Variant>& options)
    {
        sdbus::UnixFd result;
        m_proxy.callMethod("OpenPipeWireRemote").onInterface(INTERFACE_NAME).withArguments(session_handle, options).storeResultsTo(result);
        return result;
    }

public:
    uint32_t AvailableSourceTypes()
    {
        return m_proxy.getProperty("AvailableSourceTypes").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint32_t AvailableCursorModes()
    {
        return m_proxy.getProperty("AvailableCursorModes").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    uint32_t version()
    {
        return m_proxy.getProperty("version").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

private:
    sdbus::IProxy& m_proxy;
};

}}} // namespaces

#endif
