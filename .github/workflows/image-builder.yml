name: Build Image

on: 
  workflow_dispatch:
    inputs:
      tags:
        description: 'HyperHDR release tag (for example 17.0.0.0)'
      architecture:
        description: 'ARM architecture: armv6l/armv7l/aarch64'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HYPERHDR_DEB: 'https://github.com/awawa-dev/HyperHDR/releases/download/v${{ github.event.inputs.tags }}/HyperHDR-${{ github.event.inputs.tags }}-Linux-${{ github.event.inputs.architecture }}.deb'
      
    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install coreutils p7zip-full qemu-user-static

    - name: Checkout CustomPiOS
      uses: actions/checkout@v2
      with:
        repository: 'guysoft/CustomPiOS'
        path: CustomPiOS

    - name: Prepare HyperHDR module
      run: |
        cd CustomPiOS
        sudo bash -x src/make_custom_pi_os HyperHDR
        sudo chown -R runner HyperHDR        

    - name: Download Raspbian Image (32-bits)
      if: github.event.inputs.architecture != 'aarch64'
      run: |
        mkdir -p CustomPiOS/HyperHDR/src/image
        cd CustomPiOS/HyperHDR/src/image
        wget -c --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_armhf_latest'
        echo "workspace_dir=CustomPiOS/HyperHDR/src/workspace" >> $GITHUB_ENV

    - name: Download Raspbian Image (64-bits)
      if: github.event.inputs.architecture == 'aarch64'
      run: |
        mkdir -p CustomPiOS/HyperHDR/src/image-raspios_lite_arm64
        cd CustomPiOS/HyperHDR/src/image-raspios_lite_arm64
        wget -c --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_arm64_latest'
        echo "workspace_dir=CustomPiOS/HyperHDR/src/workspace-raspios_lite_arm64" >> $GITHUB_ENV
        echo "workspace_variant=raspios_lite_arm64" >> $GITHUB_ENV

    - name: Update HyperHDR modules
      run: | 
        cd CustomPiOS/HyperHDR/src
        echo 'export DIST_NAME=HyperHDR' > config
        echo 'export DIST_VERSION=${{ github.event.inputs.tags }}' >> config
        echo 'export MODULES="base(network,hyperhdr)"' >> config
        echo 'export RPI_IMAGER_NAME="${DIST_NAME} version ${DIST_VERSION}"' >> config
        echo 'export RPI_IMAGER_DESCRIPTION="A Raspberry Pi distribution for ambient lighting. Ships HyperHDR out-of-the-box."' >> config
        echo 'export RPI_IMAGER_ICON="https://github.com/awawa-dev/HyperHDR/blob/master/resources/icons/hyperhdr-icon-32px.png"' >> config
        echo 'export BASE_IMAGE_ENLARGEROOT=2000' >> config
        echo 'export BASE_IMAGE_RESIZEROOT=200' >> config      
        cd modules/hyperhdr
        echo '#!/usr/bin/env bash'  > start_chroot_script
        echo 'set -x' >> start_chroot_script
        echo 'set -e' >> start_chroot_script
        echo 'source /common.sh' >> start_chroot_script
        echo 'apt-get update' >> start_chroot_script
        echo 'cd /tmp' >> start_chroot_script
        echo 'wget ${{env.HYPERHDR_DEB}} -O hyperhdr.deb' >> start_chroot_script
        echo 'apt install -y ./hyperhdr.deb' >> start_chroot_script
        echo 'rm ./hyperhdr.deb' >> start_chroot_script
        echo 'touch /boot/ssh' >> start_chroot_script
        echo 'echo "HyperHDR" > /etc/hostname' >> start_chroot_script
        echo 'sed -i "s/raspberrypi/HyperHDR/" /etc/hosts' >> start_chroot_script
        echo "systemctl -q enable hyperhdr@pi.service" >> start_chroot_script
        echo 'sed -i "s/^#dtparam=spi=on.*/dtparam=spi=on/" /boot/config.txt' >> start_chroot_script
        echo 'sed -i "s/^#hdmi_force_hotplug=1.*/hdmi_force_hotplug=1/" /boot/config.txt' >> start_chroot_script
        chmod +x start_chroot_script

    - name: Build HyperHDR Raspbian Image
      run: |
        sudo modprobe loop
        cd CustomPiOS/HyperHDR
        sudo bash -x src/build_dist ${{ env.workspace_variant }}

    - name: Copy output
      id: copy
      run: |
        IMAGE=SD-card-image-${{ github.event.inputs.tags }}-${{ github.event.inputs.architecture }}
        cp ${{ env.workspace_dir }}/*.img $IMAGE.img
        echo "::set-output name=image::$IMAGE"

    # artifact upload will take care of zipping for us
    - uses: actions/upload-artifact@v1      
      with:
        name: ${{ steps.copy.outputs.image }}
        path: ${{ steps.copy.outputs.image }}.img
