name: HyperHDR CI Build

on: [push]

env:
    USE_CACHE: "1"
    RESET_CACHE: "0"
    
jobs:

######################
###### Linux #########
######################

  Linux:
    name: ${{ matrix.dockerName }}
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        debian: [ bullseye ]
        dockerImage: [ x86_64, rpi012-armv6l, rpi34-armv7l, arm-aarch64 ]
        include:        
          - dockerImage: x86_64
            debian: bullseye
            dockerName: Debian Bullseye (x86_64)
            platform: linux
          - dockerImage: rpi012-armv6l
            debian: bullseye
            dockerName: Debian Bullseye (Raspberry Pi ZERO, 1 & 2)
            platform: rpi
          - dockerImage: rpi34-armv7l
            debian: bullseye
            dockerName: Debian Bullseye (Raspberry Pi 3 & 4)
            platform: rpi
          - dockerImage: arm-aarch64
            debian: bullseye
            dockerName: Debian Bullseye (ARM aarch64)
            platform: rpi            

    steps:
      # checkout
      - uses: actions/checkout@v1
        with:
          submodules: true

      # generate cache id
      - name: Prepare ccache timestamp
        if: env.USE_CACHE == '1'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
          message("::set-output name=timestamp::${current_date}")

       # download cache
      - name: ccache cache files
        if: ( env.USE_CACHE == '1' )
        uses: actions/cache@v3
        with:
           path: .ccache
           key: ${{ matrix.debian }}-${{ matrix.dockerImage }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
           restore-keys: ${{ matrix.debian }}-${{ matrix.dockerImage }}-ccache-

      - name: Build packages
        env:
          DOCKER_IMAGE: ${{ matrix.dockerImage }}
          DOCKER_TAG: ${{ matrix.debian }}
          DOCKER_NAME: ${{ matrix.dockerName }}
          PLATFORM: ${{ matrix.platform }}
          USE_CCACHE: ${{ env.USE_CACHE }}
          RESET_CACHE: ${{ env.RESET_CACHE }}
        shell: bash
        run: ./.ci/ci_build.sh

      # upload artifacts (only on tagged commit)
      - name: Upload artifacts
        if: startsWith(github.event.ref, 'refs/tags')
        uses: actions/upload-artifact@v2
        with:
          path: deploy/Hyper*

      # Upload artifacts from commit
      - name: Upload artifacts from commit
        if: (startsWith(github.event.ref, 'refs/tags') != true)
        uses: actions/upload-artifact@v2
        with:
          name: Linux-${{ matrix.debian }}-${{ matrix.dockerImage }}-DEB-installer
          path: deploy/Hyper*.deb

######################
####### macOS ########
######################

  macOS:
    name: macOS
    runs-on: macos-12
    env:     
      QT_VERSION: "5"
    steps:
      # Checkout
      - uses: actions/checkout@v1
        with:
            submodules: true

      # Generate cache id
      - name: Prepare ccache timestamp
        if: env.USE_CACHE == '1'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
            string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
            message("::set-output name=timestamp::${current_date}")

      # Download cache
      - name: ccache cache files
        if: ( env.USE_CACHE == '1' )
        uses: actions/cache@v3
        with:
            path: .ccache
            key: macOS-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            restore-keys: macOS-ccache-

      # Install deps
      - name: Install deps
        shell: bash
        run: brew update && brew install qt@${{ env.QT_VERSION }} xz ccache
        
      # Set env
      - name: Set QT5 env
        if: ( env.QT_VERSION == '5' )
        shell: bash
        run: |
            export Qt5_DIR=`brew --prefix qt5`;
            echo "Qt5_DIR=$Qt5_DIR" >> $GITHUB_ENV
            
        # Build process
      - name: Build packages
        env:
            PLATFORM: osx
            USE_CCACHE: ${{ env.USE_CACHE }}
            RESET_CACHE: ${{ env.RESET_CACHE }}
        shell: bash
        run: ./.ci/ci_build.sh

      # Upload artifacts (only on tagged commit)
      - name: Upload artifacts
        if: startsWith(github.event.ref, 'refs/tags')
        uses: actions/upload-artifact@v2
        with:
            path: build/Hyper*.dmg

      # Upload artifacts from commit
      - name: Upload artifacts from commit
        if: (startsWith(github.event.ref, 'refs/tags') != true)
        uses: actions/upload-artifact@v2
        with:
            name: Apple_macOS_x64_DMG_installer
            path: build/Hyper*.dmg

######################
###### Windows #######
######################

  windows:
    name: Windows
    runs-on: windows-2022
    env:
      VCINSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
      QT_VERSION: 6.2.4
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache Qt
        uses: actions/cache@v3
        id: cache-qt-windows
        with:
          path: ${{ runner.workspace }}/Qt
          key: ${{ runner.os }}-Qt.${{ env.QT_VERSION }}
     
      - name: Install QT
        if: steps.cache-qt-windows.outputs.cache-hit != 'true'
        run: |          
          pip install aqtinstall
          aqt install-qt -O ${{ runner.workspace }}/Qt windows desktop ${{ env.QT_VERSION }} win64_msvc2019_64 -m qtserialport

      - name: Set up x64 build architecture environment
        shell: cmd
        run: call "${{env.VCINSTALLDIR}}\Auxiliary\Build\vcvars64.bat"
          
      # Build packages
      - name: Build packages        
        env:
          PLATFORM: windows
          CMAKE_PREFIX_PATH: "${{ runner.workspace }}/Qt/${{ env.QT_VERSION }}/msvc2019_64/lib/cmake/"
        shell: bash
        run: |
          ./.ci/ci_build.sh

      # upload artifacts (only on tagged commit)
      - name: Upload artifacts
        if: startsWith(github.event.ref, 'refs/tags')
        uses: actions/upload-artifact@v2
        with:
          path: build/Hyper*
          
      # Upload artifacts from commit
      - name: Upload artifacts from commit
        if: (startsWith(github.event.ref, 'refs/tags') != true)
        uses: actions/upload-artifact@v2
        with:
          name: Windows_x64_setup
          path: build/Hyper*.exe
  
################################
###### Publish Releases ########
################################

  publish:
    name: Publish Releases
    if: startsWith(github.event.ref, 'refs/tags')
    needs: [Linux, windows, macOS]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # generate environment variables
      - name: Generate environment variables from version and tag
        run: |
          echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "VERSION=$(tr -d '\n' < version)" >> $GITHUB_ENV
          echo "preRelease=false" >> $GITHUB_ENV

      # If version contains alpha or beta, mark draft release as pre-release
      - name: Mark release as pre-release
        if: contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta')
        run: echo "preRelease=true" >> $GITHUB_ENV

      # Download artifacts from previous build process
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      # create draft release and upload artifacts
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          name: HyperHDR ${{ env.VERSION }}
          tag_name: ${{ env.TAG }}
          files: "artifacts/**"
          draft: true
          prerelease: ${{ env.preRelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
