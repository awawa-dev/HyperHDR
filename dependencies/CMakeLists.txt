if ( ENABLE_CEC )
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/libcec)	
ENDIF()

if(ENABLE_WS281XPWM)
	add_library(ws281x
		${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/mailbox.c ${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/ws2811.c
		${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/pwm.c ${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/dma.c
		${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/pcm.c
		${CMAKE_CURRENT_SOURCE_DIR}/external/rpi_ws281x/rpihw.c)
endif()

#=============================================================================
# FLATBUFFER
#=============================================================================

set(USE_SYSTEM_FLATBUFFERS_LIBS ${DEFAULT_USE_SYSTEM_FLATBUFFERS_LIBS} CACHE BOOL "use flatbuffers library from system")

if (USE_SYSTEM_FLATBUFFERS_LIBS)
	find_program(FLATBUFFERS_FLATC_EXECUTABLE NAMES flatc REQUIRED)
	find_package(Flatbuffers REQUIRED)
else ()
	set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared flatbuffers library")
	set(FLATBUFFERS_BUILD_TESTS OFF CACHE BOOL "Build Flatbuffers with tests")	
	
	set(CMAKE_POLICY_DEFAULT_CMP0071 NEW)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/flatbuffers)

	if(CMAKE_CROSSCOMPILING)
		# when crosscompiling import the flatc executable targets from a file generated by a native build
		find_program(FLATBUFFERS_FLATC_EXECUTABLE NAMES flatc REQUIRED)
		if (NOT FLATBUFFERS_FLATC_EXECUTABLE)
			message( FATAL_ERROR "Please install 'flatc' compiler package for your host")
		endif()
	else()
		# export the flatc compiler so it can be used when cross compiling
		export(TARGETS flatc FILE "${CMAKE_BINARY_DIR}/flatc_export.cmake")
	endif()

	# define the include for the flatbuffers library at the parent scope
	set(FLATBUFFERS_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/flatbuffers/include")

	IF (NOT CMAKE_CROSSCOMPILING)
		# define the flatc executable at the parent scope
		set(FLATBUFFERS_FLATC_EXECUTABLE "$<TARGET_FILE:flatc>")
	else()
		message( WARNING "Using host flatc compiler: ${FLATBUFFERS_FLATC_EXECUTABLE}")
	endif()
endif()
set(FLATBUFFERS_FLATC_EXECUTABLE ${FLATBUFFERS_FLATC_EXECUTABLE} PARENT_SCOPE)
set(FLATBUFFERS_INCLUDE_DIRS ${FLATBUFFERS_INCLUDE_DIRS} PARENT_SCOPE)
include_directories(${FLATBUFFERS_INCLUDE_DIRS})

if (FLATBUFFERS_INCLUDE_DIRS AND EXISTS "${FLATBUFFERS_INCLUDE_DIRS}/../package.json")		
		file(STRINGS "${FLATBUFFERS_INCLUDE_DIRS}/../package.json" _FLATBUFFERS_VERSION_STRING REGEX "^[ \t\r\n]+\"version\":[ \t\r\n]+\"[0-9]+.[0-9]+.[0-9]+\",")
		string(REGEX REPLACE "^[ \t\r\n]+\"version\":[ \t\r\n]+\"([0-9]+.[0-9]+.[0-9]+)\"," "\\1" FLATBUFFERS_PARSE_VERSION "${_FLATBUFFERS_VERSION_STRING}")
		message(STATUS "Using flatbuffers libraries version: \"${FLATBUFFERS_PARSE_VERSION}\"")
endif ()

function(compile_flattbuffer_schema SRC_FBS OUTPUT_DIR)
	string(REGEX REPLACE "\\.fbs$" "_generated.h" GEN_HEADER ${SRC_FBS})
	set_property(SOURCE ${GEN_HEADER} PROPERTY SKIP_AUTOMOC ON)

	add_custom_command(
		OUTPUT ${GEN_HEADER}
		COMMAND "${FLATBUFFERS_FLATC_EXECUTABLE}" -c --no-includes --gen-mutable
				--gen-object-api
				-o "${OUTPUT_DIR}"
				"${SRC_FBS}"
		DEPENDS "${FLATBUFFERS_FLATC_EXECUTABLE}" ${SRC_FBS})
endfunction()

#=============================================================================
# MBEDTLS
#=============================================================================

set(USE_SYSTEM_MBEDTLS_LIBS ${DEFAULT_USE_SYSTEM_MBEDTLS_LIBS} CACHE BOOL "use mbedtls library from system")

if (USE_SYSTEM_MBEDTLS_LIBS)
	find_package(mbedtls REQUIRED)
	if (NOT MBEDTLS_FOUND)
		message(STATUS "Could NOT find mbedtls system libraries, build static mbedtls libraries")
		#Fallback: build mbedtls static libray inside project
		set(DEFAULT_USE_SYSTEM_MBEDTLS_LIBS OFF PARENT_SCOPE)
		set(USE_SYSTEM_MBEDTLS_LIBS OFF)
	endif (NOT MBEDTLS_FOUND)
else()
	cmake_minimum_required(VERSION 3.2)
	set(DEFAULT_USE_SYSTEM_MBEDTLS_LIBS OFF CACHE BOOL "system mbedtls libraries not found, disable use system mbedtls libraries")
	set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared mbedtls libraries")

	set(ENABLE_TESTING OFF CACHE BOOL "Disable mbedTLS tests")
	set(ENABLE_PROGRAMS OFF CACHE BOOL "Disable mbedTLS programs")
	set(USE_SHARED_MBEDTLS_LIBRARY OFF CACHE BOOL "Disable mbedTLS shared libraries")
	set(USE_STATIC_MBEDTLS_LIBRARY ON CACHE BOOL "Enable mbedTLS static libraries")

	set(MBEDTLS_DOWNLOAD_DIR "${CMAKE_BINARY_DIR}/dependencies/external/mbedtls/download")
	set(MBEDTLS_SOURCE_DIR "${CMAKE_SOURCE_DIR}/dependencies/external/mbedtls")
	set(MBEDTLS_BINARY_DIR "${CMAKE_BINARY_DIR}/dependencies/external/mbedtls/build")
	set(MBEDTLS_INSTALL_DIR "${CMAKE_BINARY_DIR}")
	if(${CMAKE_BUILD_TYPE} AND ${CMAKE_BUILD_TYPE} EQUAL "Debug")
		set(MBEDTLS_LOGGING 1)
	else ()
		set(MBEDTLS_LOGGING 0)
	endif ()
	
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/mbedtls)

	set (MBEDTLS_INCLUDE_DIR "${MBEDTLS_SOURCE_DIR}/include")
	set (MBEDTLS_INCLUDE_DIR ${MBEDTLS_INCLUDE_DIR} PARENT_SCOPE)
	if (MBEDTLS_INCLUDE_DIR AND EXISTS "${MBEDTLS_INCLUDE_DIR}/mbedtls/build_info.h")
		file(STRINGS "${MBEDTLS_INCLUDE_DIR}/mbedtls/build_info.h" _MBEDTLS_VERSION_STRING REGEX "^#define MBEDTLS_VERSION_STRING[ \t\r\n]+\"[0-9]+.[0-9]+.[0-9]+\"")
		string(REGEX REPLACE "^#define MBEDTLS_VERSION_STRING[ \t\r\n]+\"([0-9]+.[0-9]+.[0-9]+)\"" "\\1" MBEDTLS_VERSION "${_MBEDTLS_VERSION_STRING}")
		message(STATUS "Using static mbedtls libraries version: \"${MBEDTLS_VERSION}\"")
	elseif (MBEDTLS_INCLUDE_DIR AND EXISTS "${MBEDTLS_INCLUDE_DIR}/mbedtls/version.h")
		file(STRINGS "${MBEDTLS_INCLUDE_DIR}/mbedtls/version.h" _MBEDTLS_VERSION_STRING REGEX "^#[\t ]*define[\t ]+MBEDTLS_VERSION_STRING[\t ]+\"[0-9]+.[0-9]+.[0-9]+\"")
		string(REGEX REPLACE "^.*MBEDTLS_VERSION_STRING.*([0-9]+.[0-9]+.[0-9]+).*" "\\1" MBEDTLS_VERSION "${_MBEDTLS_VERSION_STRING}")
		message(STATUS "Using static mbedtls libraries (build version \"${MBEDTLS_VERSION}\")")
	endif ()

	include_directories(${MBEDTLS_INCLUDE_DIR})

	if(WIN32)
		set (MBEDTLS_LIB_INSTALL_DIR_WITH_LIB_PREFIX "${MBEDTLS_INSTALL_DIR}/lib/${CMAKE_CFG_INTDIR}/")
	else()
		set (MBEDTLS_LIB_INSTALL_DIR_WITH_LIB_PREFIX "${MBEDTLS_INSTALL_DIR}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}")
	endif ()

	set (MBEDTLS_SSL_LIBRARY "${MBEDTLS_LIB_INSTALL_DIR_WITH_LIB_PREFIX}mbedtls${CMAKE_STATIC_LIBRARY_SUFFIX}")
	set (MBEDTLS_X509_LIBRARY "${MBEDTLS_LIB_INSTALL_DIR_WITH_LIB_PREFIX}mbedx509${CMAKE_STATIC_LIBRARY_SUFFIX}")
	set (MBEDTLS_CRYPTO_LIBRARY "${MBEDTLS_LIB_INSTALL_DIR_WITH_LIB_PREFIX}mbedcrypto${CMAKE_STATIC_LIBRARY_SUFFIX}")
	set (MBEDTLS_LIBRARIES ${MBEDTLS_SSL_LIBRARY} ${MBEDTLS_X509_LIBRARY} ${MBEDTLS_CRYPTO_LIBRARY})
	set (MBEDTLS_LIBRARIES ${MBEDTLS_LIBRARIES} PARENT_SCOPE)

	if(${CMAKE_BUILD_TYPE} AND ${CMAKE_BUILD_TYPE} EQUAL "Debug")
		message(STATUS "mbedtls libraries: ${MBEDTLS_LIBRARIES}")
	endif ()

	mark_as_advanced (MBEDTLS_INCLUDE_DIR MBEDTLS_LIBRARIES MBEDTLS_SSL_LIBRARY MBEDTLS_X509_LIBRARY MBEDTLS_CRYPTO_LIBRARY)

endif (USE_SYSTEM_MBEDTLS_LIBS)

if ( ENABLE_MQTT )
	# HyperHDR workaround for fixed Qt5 version
	file(READ "${CMAKE_CURRENT_SOURCE_DIR}/external/qmqtt/CMakeLists.txt" FILE_CONTENTS)
	string(REPLACE "Qt5" "Qt${Qt_VERSION}" FILE_CONTENTS "${FILE_CONTENTS}")
	file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/external/qmqtt/CMakeLists.txt" "${FILE_CONTENTS}")

	if (NOT WIN32)	
		set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
		set(qmqtt_SHARED OFF)
	endif()

	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/qmqtt)	
ENDIF()

if ( ENABLE_XZ )
	option(BUILD_TESTING "" OFF)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/external/xz)	
ENDIF()
